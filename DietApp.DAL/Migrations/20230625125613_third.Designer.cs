// <auto-generated />
using System;
using DietApp.DAL.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DietApp.DAL.Migrations
{
    [DbContext(typeof(DietAppDbContext))]
    [Migration("20230625125613_third")]
    partial class third
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DietApp.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Süt Grubu",
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(6588),
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Et Grubu",
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(6591),
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "KuruBaklagil Grubu",
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(6592),
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Ekmek Grubu",
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(6593),
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Sebze Grubu",
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(6593),
                            IsActive = true
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Meyve Grubu",
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(6594),
                            IsActive = true
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Yağ Grubu",
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(6594),
                            IsActive = true
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Tatlı Grubu",
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(6595),
                            IsActive = true
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Kuruyemiş Grubu",
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(6596),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("DietApp.Entity.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Calorie")
                        .HasColumnType("float");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FoodName")
                        .IsUnique();

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calorie = 11400.0,
                            CategoryId = 1,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(8264),
                            Description = "1 su bardağı,200 ml",
                            FoodName = "Süt",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            Calorie = 69000.0,
                            CategoryId = 2,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(8267),
                            Description = "1 köfte, 30gr",
                            FoodName = "Kıyma",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            Calorie = 80000.0,
                            CategoryId = 3,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(8267),
                            Description = "4 yemek kaşığı, 25gr",
                            FoodName = "Mercimek",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            Calorie = 68000.0,
                            CategoryId = 4,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(8268),
                            Description = "3 yemek kaşığı, 50gr",
                            FoodName = "Makarna",
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            Calorie = 25000.0,
                            CategoryId = 5,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(8272),
                            Description = "4 yemek kaşığı, 200gr",
                            FoodName = "Brokoli(Pişmiş)",
                            IsActive = true
                        },
                        new
                        {
                            Id = 6,
                            Calorie = 60000.0,
                            CategoryId = 6,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(8273),
                            Description = "1 küçük boy, 120gr",
                            FoodName = "Elma",
                            IsActive = true
                        },
                        new
                        {
                            Id = 7,
                            Calorie = 45000.0,
                            CategoryId = 7,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(8274),
                            Description = "1 tatlı kaşığı, 5gr",
                            FoodName = "Tereyağ",
                            IsActive = true
                        },
                        new
                        {
                            Id = 8,
                            Calorie = 68000.0,
                            CategoryId = 8,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(8275),
                            Description = "1 yemek kaşığı, 30gr",
                            FoodName = "Bal",
                            IsActive = true
                        },
                        new
                        {
                            Id = 9,
                            Calorie = 45000.0,
                            CategoryId = 9,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(8303),
                            Description = "2 adet, 8gr",
                            FoodName = "Ceviz içi",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("DietApp.Entity.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MealName")
                        .IsUnique();

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(5296),
                            IsActive = true,
                            MealName = "Kahvaltı"
                        },
                        new
                        {
                            Id = 2,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(5299),
                            IsActive = true,
                            MealName = "Öğle Yemeği"
                        },
                        new
                        {
                            Id = 3,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(5300),
                            IsActive = true,
                            MealName = "Akşam Yemeği"
                        });
                });

            modelBuilder.Entity("DietApp.Entity.MealFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<double>("Portion")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealId");

                    b.HasIndex("UserId");

                    b.ToTable("MealsFoods");
                });

            modelBuilder.Entity("DietApp.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateOn")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("nvarchar(130)");

                    b.Property<string>("UserTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateOn = new DateTime(2023, 6, 25, 15, 56, 13, 84, DateTimeKind.Local).AddTicks(3870),
                            Email = "admin@gmail.com",
                            IsActive = true,
                            Password = "123456",
                            UserName = "Admin",
                            UserTypes = "Admin"
                        });
                });

            modelBuilder.Entity("DietApp.Entity.Food", b =>
                {
                    b.HasOne("DietApp.Entity.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DietApp.Entity.MealFood", b =>
                {
                    b.HasOne("DietApp.Entity.Food", "Food")
                        .WithMany("MealFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DietApp.Entity.Meal", "Meal")
                        .WithMany("MealFoods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DietApp.Entity.User", "User")
                        .WithMany("MealFoods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Meal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DietApp.Entity.Category", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("DietApp.Entity.Food", b =>
                {
                    b.Navigation("MealFoods");
                });

            modelBuilder.Entity("DietApp.Entity.Meal", b =>
                {
                    b.Navigation("MealFoods");
                });

            modelBuilder.Entity("DietApp.Entity.User", b =>
                {
                    b.Navigation("MealFoods");
                });
#pragma warning restore 612, 618
        }
    }
}
